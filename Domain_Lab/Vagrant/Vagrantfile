# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |cfg|

  fqdn = "nebulatech.local"
  root_netbios = "nebulatech"

  rootdc_name = "11DC11"
  rootdc_ip = "10.10.10.100"

  server_name = "11W11"
  server_ip = "10.10.10.150"

  wks_name = "22W22"
  wks_ip = "10.10.10.200"

  #This is a domain controller with standard configuration. It creates a single forest and populates the domain with AD objects like users and groups. It can also create specific GPOs and serve as a DNS server.
  cfg.vm.define "11DC11" do |config|
    config.vm.box = "/home/user/Documents/Domain_Lab/Packer/win2019.box" # Change path to your packer golden box!!!!!!!!!!!!!!!!
    config.vm.hostname = rootdc_name

    # Use the plaintext WinRM transport and force it to use basic authentication.
    # NB this is needed because the default negotiate transport stops working
    # after the domain controller is installed.
    # see https://groups.google.com/forum/#!topic/vagrant-up/sZantuCM0q4
    config.winrm.transport = :plaintext
    config.winrm.basic_auth_only = true
    config.winrm.retry_limit = 30
    config.winrm.retry_delay = 10

    config.vm.provider :virtualbox do |v, override|
      v.gui = true # Change to false if you don't need GUI 
      v.cpus = 2
      v.memory = 2048
      v.customize ["modifyvm", :id, "--vram", 64]
      v.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"] #If you need clipboard
    end

    config.vm.network :private_network,
      :ip => rootdc_ip

    # Configure keyboard/language/timezone etc.
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/windows/provision-base.ps1 en-ZA"
    config.vm.provision "shell", reboot: true

    # Configure DNS
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/networking/network-setup.ps1 network-setup-rootdc.ps1 root_dns_entries.csv"
    config.vm.provision "shell", reboot: true

    # Create forest root
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/ad/install-domain.ps1 domain-variables.json"
    config.vm.provision "shell", reboot: true

    # Add planned users to the domain
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/ad/create-ad-objects.ps1 domain-variables.json planned-users.json"
    config.vm.provision "shell", reboot: true
    
     # Executes files that are based in /file folder. For example, monitoring software or app installation package.
    #config.vm.provision "shell", path: "sharedscripts/windows/execute-apps.ps1"
    
    # Create GPO to enable event generation on windows hosts and propagate it to domain
    config.vm.provision "shell", path: "sharedscripts/windows/install-events_gen.ps1" 
    config.vm.provision "shell", reboot: true

    # Configure collector on DC and create GPO that will pull logs from all hosts in domain
    config.vm.provision "shell", path: "sharedscripts/windows/install-collector.ps1" 
    config.vm.provision "shell", reboot: true

    # Executes files that are based in /file folder. For example, monitoring software or app installation package.
    config.vm.provision "shell", path: "sharedscripts/windows/execute-apps.ps1"

    # TO_DO: Import GPO's?
    # For example, proper logging of windows events, password policy, etc.

    # Reboot so that the scheduled task runs
    config.vm.provision "shell", reboot: true

  end

  # This is a simple server that is domain-joined. It can be used to host various web applications.
  cfg.vm.define "11W11" do |config|

    config.vm.box = "/home/user/Documents/Domain_Lab/Packer/win2019.box" # Change path to your packer golden box!!!!!!!!!!!!!!!!
    config.vm.hostname = server_name

    # Use the plaintext WinRM transport and force it to use basic authentication.
    # NB this is needed because the default negotiate transport stops working
    # after the domain controller is installed.
    # see https://groups.google.com/forum/#!topic/vagrant-up/sZantuCM0q4
    config.winrm.transport = :plaintext
    config.winrm.basic_auth_only = true
    config.winrm.retry_limit = 30
    config.winrm.retry_delay = 10

    config.vm.provider :virtualbox do |v, override|
      v.gui = true # Change to false if you don't need GUI
      v.cpus = 2
      v.memory = 2048
      v.customize ["modifyvm", :id, "--vram", 64]
      v.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"] #If you need clipboard
    end

    config.vm.network :private_network,
      :ip => server_ip

    # Run sysprep before joining the domain (needed because the SIDs are identical on Vagrant Cloud images)
    config.vm.provision "windows-sysprep"

    # Install Chocolatey - This can be used to install apps with one-liners.
    # config.vm.provision "install-choco", type: "shell", path: "sharedscripts/windows/install-choco.ps1"
    # config.vm.provision "shell", reboot: true

    # Configure keyboard/language/timezone, etc.
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/windows/provision-base.ps1 en-ZA"
    config.vm.provision "shell", reboot: true

    # Configure DNS
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/networking/network-setup.ps1"
    config.vm.provision "shell", reboot: true  

    # Join the domain specified in the provided variables file - Only do this after everything else has been installed
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/ad/join-domain.ps1 domain-variables.json OU=Servers"
    config.vm.provision "shell", reboot: true
    
    # Update GPO
    config.vm.provision "shell", inline:"gpupdate /force"

    # Reboot so that the scheduled task runs
    config.vm.provision "shell", reboot: true
  end
  
 cfg.vm.define "22W22" do |config|
    config.vm.box = "/home/user/Documents/Domain_Lab/Packer/win10.box" # Change path to your packer golden box!!!!!!!!!!!!!!!!
    config.vm.hostname = wks_name

    # Use the plaintext WinRM transport and force it to use basic authentication.
    # NB this is needed because the default negotiate transport stops working
    # after the domain controller is installed.
    # see https://groups.google.com/forum/#!topic/vagrant-up/sZantuCM0q4
    config.winrm.transport = :plaintext
    config.winrm.basic_auth_only = true
    config.winrm.retry_limit = 30
    config.winrm.retry_delay = 10

    config.vm.provider :virtualbox do |v, override|
      v.gui = true # Change to false if you don't need GUI 
      v.cpus = 2
      v.memory = 4096
      v.customize ["modifyvm", :id, "--vram", 64]
      v.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"] #If you need clipboard
    end

    config.vm.network :private_network,
      :ip => wks_ip

    # Run sysprep before joining the domain (needed because the SIDs are identical on Vagrant Cloud images)
    # config.vm.provision "windows-sysprep"


    # Configure keyboard/language/timezone, etc.
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/windows/provision-base.ps1 en-ZA"
    config.vm.provision "shell", reboot: true

    # Configure DNS
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/networking/network-setup.ps1"
    config.vm.provision "shell", reboot: true 

    # Join the domain specified in the provided variables file
    config.vm.provision "shell", path: "sharedscripts/ps.ps1", args: "sharedscripts/ad/join-domain.ps1 domain-variables.json OU=Workstations"
    config.vm.provision "shell", reboot: true

    # TO_DO: Double-check if it is installed correctly
    # Install Atomic on host 
    config.vm.provision "shell", path: "sharedscripts/windows/install-atomic.ps1"
    
    # Update GPO
    config.vm.provision "shell", inline:"gpupdate /force"
    
    # Install choco  
    # config.vm.provision "shell", path: "sharedscripts/windows/soft/install-choco.ps1"
    # config.vm.provision "shell", path: "sharedscripts/windows/soft/install-soft.ps1"
    
    # Executes files that are based in /file folder. For example, monitoring software or app installation package.
    #config.vm.provision "shell", path: "sharedscripts/windows/execute-apps.ps1"
    
    # Reboot so that the scheduled task runs
    config.vm.provision "shell", reboot: true
  end
end
